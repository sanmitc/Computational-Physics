# -*- coding: utf-8 -*-
"""Q11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MfXCTC-zIWaZZgw5QPLicENiN_Eov5Qb

# Question 11
"""

#tbd partial pivoting
import numpy as np
import math
from numpy import array,empty

def pp_Gauss(A,v):
  row=A.shape[0]
  col=A.shape[1]

  for i in range(col):
    if((A[i,i])==0):
      for k in range(i+1, row):
        if((A[k,i])!=0):
          for j in range(i, col):
            A[k,j],A[i,j]=A[i,j],A[k,j]
          v[k],v[i]=v[i],v[k]
          break
    div=A[i,i]
    A[i,:] /=div
    v[i] /=div
    for j in range(i+1, row):
      mult=A[j,i]
      A[j, :]-=mult*A[i,:]
      v[j]-=mult*v[i]
    
  x = empty(N,float)
  for m in range(N-1,-1,-1):
    x[m] = v[m]
    for i in range(m+1,N):
        x[m] -= A[m,i]*x[i]

  return x


def Gauss(A,v):
  row=A.shape[0]
  col=A.shape[1]

  for i in range(col):
    div=A[i,i]
    A[i,:] /=div
    v[i] /=div
    for j in range(i+1, row):
      mult=A[j,i]
      A[j, :]-=mult*A[i,:]
      v[j]-=mult*v[i]
    
  x = empty(N,float)
  for m in range(N-1,-1,-1):
    x[m] = v[m]
    for i in range(m+1,N):
        x[m] -= A[m,i]*x[i]

  return x



  
A= array([[4, -1, -1, -1],
         [-1, 3, 0, -1],
         [-1, 0, 3, -1],
         [-1, -1, -1, 4]], float)

v=array([5, 0 , 5, 0], float)
N=len(v)

#part A
print('solution of the previous problem matrix with partial pivoting:', pp_Gauss(A,v))



A1= array([[0, 1, 4, 1],
         [3, 4, -1, -1],
         [1, -4, 1, 5],
         [2, -2, 1, 3]], float)

A_work=A1.copy()

v1=array([-4, 3, 9, 7], float)
N=len(v)

#part b
x=pp_Gauss(A_work, v1)
print('solution of current matrix with partial pivoting:', x)


v_res=np.dot(A1, x)
print('v recovered from multioplying the solution and the original matrix gives:', v_res)

#the v_res matches with the orginial v given to us.