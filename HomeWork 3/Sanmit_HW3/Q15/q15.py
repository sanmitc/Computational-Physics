# -*- coding: utf-8 -*-
"""Q15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GUXu8hqj7tjDOupquQ5jBiFW6aLxGfUs

# Question 15
"""

import numpy as np
import matplotlib.pyplot as plt
import math
import cmath


def QR_1(A):
  #calculating number of rows
  n=A.shape[0]
  V=A.copy()
  q=[]
  r=np.zeros(A.shape)
  for i in range(n):
    v=V[:,i]
    r[i][i]=math.sqrt(np.dot(v,v))
    q.append(v/math.sqrt(np.dot(v,v)))
    qi=v/r[i][i]
    for j in range(i+1, n):
      r[i][j]=(np.dot(qi, V[:,j]))
      V[:,j]=np.subtract(V[:,j],r[i][j]*qi)
  r=np.matrix(r)
  q=np.matrix(q)

  return r,q

def proj(u,v):
  a=np.dot(u,v)
  b=np.dot(u,u)
  return (a/b)*u

def QR(A):
  row=A.shape[0]
  col=A.shape[1]

  r=np.zeros(A.shape)
  r[0,0]=math.sqrt(np.dot(A[:,0],A[:,0]))
  A[:,0]=A[:,0]/r[0,0]
  for i in range(1,col):
    for k in range(0,i):
      r[k][i]=np.dot(A[:,i],A[:,k])
      A[:,i]= A[:,i]-proj(A[:,k], A[:,i])
    r[i][i]=math.sqrt(np.dot(A[:,i],A[:,i]))
    A[:,i]=A[:,i]/r[i][i]
  return r



  
'''A=np.array([[1,4,8,4],[4,2,3,7],[8,3,6,9],[4,7,9,2]], float)
QR(A)
print(QR(A)[0])
print(QR(A)[1])'''

A=np.array([[1,4,8,4],[4,2,3,7],[8,3,6,9],[4,7,9,2]], float)
r=QR(A)
print('Q is:')
print(A)
print('\n')
print('R is:')
print(r)

A=np.array([[1,4,8,4],[4,2,3,7],[8,3,6,9],[4,7,9,2]], float)
R=QR(A)
Q=A

A_res=Q @ R
print('reconstruction of the matrix:')
print( A_res)

# part b

A=np.array([[1,4,8,4],[4,2,3,7],[8,3,6,9],[4,7,9,2]], float)

def Eigen(A, tol):
  i=0
  while(i<1000):
    R=QR(A)
    Q=A
    A=R @ Q
    #check for off-diagonal elements
    row=A.shape[0]
    col=A.shape[1]
    p=0
    for i in range(col):
      for k in range(i+1, row):
        if(np.abs(A[k][i])>tol):
          p=1
          break
      if(p==1):
        break
    if(p==0):
      break
  eig=[] 
  for i in range(col):
    eig.append(A[i,i])
  A=np.array(A).astype(float)
  eig=np.array(eig).astype(float)
  return [A, eig]


tol=1e-6
p=Eigen(A, tol)
print('the matrix after eigen value algorithm execution:\n', p[0])
print('The Eigen values are:', p[1])